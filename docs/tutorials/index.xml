<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on</title><link>https://atlas-vis.github.io/tutorials/</link><description>Recent content in Tutorials on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 13 Oct 2020 15:21:01 +0200</lastBuildDate><atom:link href="https://atlas-vis.github.io/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Usage Instructions</title><link>https://atlas-vis.github.io/tutorials/instruction/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://atlas-vis.github.io/tutorials/instruction/</guid><description>Using Atlas.js in a web page Add the following code to the &amp;lt;head&amp;gt; element in your HTML document:
&amp;lt;script src=&amp;quot;https://d3js.org/d3.v7.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://atlas-vis.github.io/lib/pixi.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://atlas-vis.github.io/dist/atlas-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; Using Atlas.js in an ES6 module To get the latest version, include &amp;ldquo;atlas-vis&amp;rdquo; as a dependency in your package.json file, or do:
npm install atlas-vis To import Atlas, do:
import * as atlas from &amp;quot;atlas-vis&amp;quot;</description></item><item><title>0. Let's Create a Diverging Bar Chart</title><link>https://atlas-vis.github.io/tutorials/example/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://atlas-vis.github.io/tutorials/example/</guid><description>We start this tutorial by creating a diverging bar chart (Figure 1) using Atlas. This chart visualizes ahypothetical dataset reporting peopleâ€™s opinions on a subject matter, broken down by age (below 30, 30 - 50, 50 - 70, above 70) and responses (strongly agree, agree, disagree, strongly disagree). You can see a demo of this visualization here.
Figure 1: Diverging Bar Chart
Figure 2 shows the dataset &amp;ldquo;survey_response.</description></item><item><title>1. Visualization Object Model</title><link>https://atlas-vis.github.io/tutorials/vom/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://atlas-vis.github.io/tutorials/vom/</guid><description>Every visualization created using Atlas can be described using the following object model:
At the top level, we have a scene, acting as a container for all the visualization objects. In a scene, we typically have axes, legends, gridlines, and collections of items. A collection can be nested, e.g., the children of a collection are also collections. A collection consists of multiple marks or glyphs; where each glyph is essentially a group of marks.</description></item><item><title>2. Initialize Scene and Import Data</title><link>https://atlas-vis.github.io/tutorials/initialize/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://atlas-vis.github.io/tutorials/initialize/</guid><description>To creata a visualization, we need to create a scene first:
let scene = atlas.scene(); The returned object is an instance of the Scene class, which is one of the most important class in Atlas. Mark/glyph creation, data binding, visual encoding and graphical constraints are all accomplished as methods in this class.
Import CSV Data Atlas assumes that in Comma Separated Values (CSV) files, the first row contains the column names, and the data is in a long form.</description></item><item><title>3. Create and Render Glyphs</title><link>https://atlas-vis.github.io/tutorials/mark/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://atlas-vis.github.io/tutorials/mark/</guid><description>Marks and glyphs can be created using the mark method in the Scene class. For example, the following code creates a circle:
let circle = scene.mark(&amp;quot;circle&amp;quot;, {x: 50, y: 100, radius: 20}); The types of marks that can be created this way are: circle, line, path, rectangle, ring, text, and image. The other types of marks can only be created through the repeat, divide or densify methods in the scene class, these include: area, arc, pie, and polygon.</description></item><item><title>4. Join Graphics with Data</title><link>https://atlas-vis.github.io/tutorials/join/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://atlas-vis.github.io/tutorials/join/</guid><description>Atlas offers three primary operations to generate marks or glyphs by data: repeat, divide, and densify. To explain how these operations work, let&amp;rsquo;s use the dataset in the diverging bar chart example. The data table consists of three columns: Age Group, Response, and Percentage (percentage of people with a particular response within an age group):
repeat The repeat operation applies to any mark or glyph, and replaces it with a collection of marks/glyphs, each mark/glyph in the collection represents a unique value in the optional field parameter.</description></item><item><title>5. Lay out Objects</title><link>https://atlas-vis.github.io/tutorials/layout/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://atlas-vis.github.io/tutorials/layout/</guid><description>We get a collection of graphical objects after applying repeat, divide or densify operations. These objects can be positioned using layouts. Atlas currently provides the following types of layout: grid, stack, packing and Treemap.
To create a layout, use the layout function, for example,
let tl = atlas.layout(&amp;quot;treemap&amp;quot;, {width: 800, height: 500}); A layout can only be applied to a collection:
collection.layout = tl; You can also pass a layout as an argument when performing repeat or divide operations:</description></item><item><title>6. Specify Visual Encodings</title><link>https://atlas-vis.github.io/tutorials/encode/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://atlas-vis.github.io/tutorials/encode/</guid><description>Visual encodings specify how values in a data field is mapped to properties of a visual channel. To specify a visual encoding, we need an example mark/glyph/collection, a data field, and a visual channel:
scene.encode(rect, {field: &amp;quot;Percentage&amp;quot;, channel: &amp;quot;width&amp;quot;}); Atlas will automatically create a scale based on the provided parameters, the type and value distribution of the data field, and the type and current values of the visual channel.</description></item><item><title>7. Apply Constraints</title><link>https://atlas-vis.github.io/tutorials/constraints/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://atlas-vis.github.io/tutorials/constraints/</guid><description>So far we have seen how we can specify the positions of graphical objects using layout and encoding, one more method is to use graphical constraints.
Atlas currently supports two kinds of constraints: align and affix. The align constraint applies to an array of items, and moves the items so that their bounding boxes have the same value at a specified anchor. The figure below illustrates examples of an alignment constraint in the &amp;ldquo;y&amp;rdquo; direction with different anchor parameters.</description></item><item><title>8. Create Axis, Gridlines, and Legend</title><link>https://atlas-vis.github.io/tutorials/axis/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://atlas-vis.github.io/tutorials/axis/</guid><description>To create an axis, use the axis method in the Scene class with two required parameters: visual channel and data field. Atlas support creating an axis for the &amp;ldquo;x&amp;rdquo;, &amp;ldquo;y&amp;rdquo;, &amp;ldquo;width&amp;rdquo;, &amp;ldquo;height&amp;rdquo; and &amp;ldquo;radialDistance&amp;rdquo; channels if these channels encode data values. In addition, an axis can be created for &amp;ldquo;x&amp;rdquo; and &amp;ldquo;y&amp;rdquo; channels if items are positioned using a grid layout. In the diverging bar chart example, rows of stacked bars, each representing an age group, are laid out in a grid, so we can create an axis for the &amp;ldquo;y&amp;rdquo; channel using scn.</description></item></channel></rss>