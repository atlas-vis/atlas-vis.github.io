<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API Reference on</title><link>https://atlas-vis.github.io/docs/</link><description>Recent content in API Reference on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://atlas-vis.github.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>DataTable</title><link>https://atlas-vis.github.io/docs/data/datatable/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://atlas-vis.github.io/docs/data/datatable/</guid><description>The DataTable class represents a data table consisting of tuples (rows) and fields (columns). DataTable objects are created by importing Comma Separated Values (CSV) files using the csv function:
let table = await atlas.csv(&amp;quot;data.csv&amp;quot;); Atlas automatically infers the data type for each field/column, and parses the values accordingly
Properties property explanation type default value name the name of the data table, derived from the file name String fields the name of fields (columns) in the data table Array nonNumericFields the name of non-numeric fields (columns) in the data table Array Methods method explanation return type getFieldType(f) returns the type of the specified field Data Type getFieldSummary(f) returns a summary of the specified field Object getFieldValues(f) returns an array of values for the specified field Array getRowCount() returns the number of rows in the table Number getUniqueFieldValues(f) returns an array of unique values for the specified field Array hasField(f) returns true of the specified field exists in the data table Boolean transform(type, fields, paramas) returns a new data table as a result of specified transformation</description></item><item><title>DataScope</title><link>https://atlas-vis.github.io/docs/data/datascope/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://atlas-vis.github.io/docs/data/datascope/</guid><description>The DataScope class represents data that is joined with a graphical object (i.e., mark or group). A DataScope object contains a subset of the tuples in a data table. DataScope objects are created and assigned to graphical objects through the repeat, divide, and densify methods in the Scene class.
Properties property explanation type default value dataTable the data table from which this data scope is created DataTable filters returns field values used to filter a data table</description></item><item><title>Data Transformations</title><link>https://atlas-vis.github.io/docs/data/datatransform/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://atlas-vis.github.io/docs/data/datatransform/</guid><description>Binning The binning transformation divides the value range of a field into intervals, and counts the number of values within each interval. To apply the transformation, here is an example:
let t = datatable.transform(&amp;quot;bin&amp;quot;, [&amp;quot;col1&amp;quot;]); The returned result t is a DataTable. Each tuple (i.e., row) represents a bin or an interval. There are three fields (i.e., columns): &amp;ldquo;x0&amp;rdquo; (lower bound of the bin, inclusive), &amp;ldquo;x1&amp;rdquo; (upper bound of the bin, exclusive except the last bin), and &amp;ldquo;col1_count&amp;rdquo; (the number of values in the bin).</description></item><item><title>Encoding</title><link>https://atlas-vis.github.io/docs/encode/encoding/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://atlas-vis.github.io/docs/encode/encoding/</guid><description>An Encoding object records information about a visual encoding. When a mark&amp;rsquo;s visual channel is specified to encode a data field through the encode method in the Scene class, an Encoding object is created and returned.
Properties property explanation type default value channel the visual channel String dataTable the data table used in this encoding String field the data field String aggregator aggregator for data values String &amp;ldquo;sum&amp;rdquo; scale the scale of the encoding Scale scaleType the type of scale String depends on</description></item><item><title>Scale</title><link>https://atlas-vis.github.io/docs/encode/scale/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://atlas-vis.github.io/docs/encode/scale/</guid><description>The Scale class represents a function that maps the values of a data field (domain) to the properties of a visual channel (range). It is recommended that you do not create a scale object directly; instead, use the encode method in the Scene class to get an Encoding object, which contains a Scale object as one of its properties. For example,
let enc = scene.encode(rect.leftSegment, {field: &amp;quot;value&amp;quot;, channel: &amp;quot;x&amp;quot;}); let xScale = enc.</description></item><item><title>Layout</title><link>https://atlas-vis.github.io/docs/layout/layout/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://atlas-vis.github.io/docs/layout/layout/</guid><description>Subclasses: GridLayout, StackLayout, PackingLayout, TreemapLayout
The Layout class is an abstract class representing layout algorithms used to position children in a group. You cannot create a layout object, you can only create instances of its subclasses.
Methods method explanation return type clone() returns a copy of this layout void run() apply this layout void</description></item><item><title>GridLayout</title><link>https://atlas-vis.github.io/docs/layout/grid/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://atlas-vis.github.io/docs/layout/grid/</guid><description>extends Layout
The GridLayout class represents a layout that positions objects in a grid. To create a GridLayout object and apply it to a collection, use the layout function:
let gl = atlas.layout(&amp;quot;grid&amp;quot;, {numCols: 2, hGap: 10}); collection.layout = gl; Properties property explanation type default value type the type of the layout String &amp;ldquo;grid&amp;rdquo; group the group that uses this layout Group numRows the number of rows in the grid Number undefined numCols the number of columns in the grid Number undefined rowGap the horizontal gap between adjacent rows in the grid Number 5 colGap the vertical gap between adjacent columns in the grid Number 5 cellBounds the bounds of the grid cells Array of Rectangle [] horzCellAlignment the horizontal alignment of item in each grid cell String &amp;ldquo;left&amp;rdquo; vertCellAlignment the vertical alignment of item in each grid cell String &amp;ldquo;bottom&amp;rdquo; dir the direction in which the items are added to each grid cell Array [&amp;ldquo;l2r&amp;rdquo;, &amp;ldquo;t2b&amp;rdquo;] The direction of a grid layout consists of two components: horizontal and vertical.</description></item><item><title>PackingLayout</title><link>https://atlas-vis.github.io/docs/layout/packing/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://atlas-vis.github.io/docs/layout/packing/</guid><description>extends Layout
The PackingLayout class represents a layout that positions objects by packing them in an area. To create a PackingLayout object and apply it to a collection, use the layout function:
let pl = atlas.layout(&amp;quot;packing&amp;quot;, {x: 100, y: 100}); collection.layout = pl; Properties property explanation type default value type the type of the layout String &amp;ldquo;packing&amp;rdquo; group the group that uses this layout Group x the x coordinate of the center of the enclosing area Number y the y coordinate of the center of the enclosing area Number width the width of the enclosing area Number height the height of the enclosing area Number Methods inherited from Layout method explanation return type clone() returns a copy of this layout void run() apply this layout void</description></item><item><title>StackLayout</title><link>https://atlas-vis.github.io/docs/layout/stack/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://atlas-vis.github.io/docs/layout/stack/</guid><description>extends Layout
The StackLayout class represents a layout that positions objects by stacking them. To create a StackLayout object and apply it to a collection, use the layout function:
let sl = atlas.layout(&amp;quot;stack&amp;quot;, {orientation: &amp;quot;vertical&amp;quot;}); collection.layout = sl; Properties property explanation type default value type the type of the layout String &amp;ldquo;stack&amp;rdquo; group the group that uses this layout Group baseline the baseline of stacking String orientation the orientation of stacking String undefined horzCellAlignment the horizontal alignment of item in each cell String &amp;ldquo;left&amp;rdquo; vertCellAlignment the vertical alignment of item in each cell String &amp;ldquo;bottom&amp;rdquo; Methods inherited from Layout method explanation return type clone() returns a copy of this layout void run() apply this layout void</description></item><item><title>TreemapLayout</title><link>https://atlas-vis.github.io/docs/layout/treemap/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://atlas-vis.github.io/docs/layout/treemap/</guid><description>extends Layout
The TreemapLayout class represents a layout that positions objects using the treemap algorithm. To create a TreemapLayout object and apply it to a collection, use the layout function:
let tl = atlas.layout(&amp;quot;treemap&amp;quot;, {width: 800, height: 500}); collection.layout = tl; Properties property explanation type default value type the type of the layout String &amp;ldquo;treemap&amp;rdquo; group the group that uses this layout Group width the width of the top level container Number height the height of the top level container Number top the y coordinate of the top level container Number left the x coordinate of the top level container Number Methods inherited from Layout method explanation return type clone() returns a copy of this layout void run() apply this layout void</description></item></channel></rss>